{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{498:function(a,t,e){\"use strict\";e.r(t);var s=e(27),v=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"【笔记】python-list、tuple和dict\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#【笔记】python-list、tuple和dict\"}},[a._v(\"#\")]),a._v(\" 【笔记】Python——list、tuple和dict\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"如果中文字符串在Python环境下遇到 UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释\")]),a._v(\" \"),e(\"p\",[a._v(\"# -\"),e(\"em\",[a._v(\"- coding: utf-8 -\")]),a._v(\"-\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"Python把0、空字符串''和None看成 False，其他数值和非空字符串都看成 True\")])])]),a._v(\" \"),e(\"p\",[a._v(\"例如：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"a = True\\nprint a and 'a=T' or 'a=F'\\n\")])])]),e(\"p\",[a._v(\"计算结果是字符串而不是布尔类型\")]),a._v(\" \"),e(\"p\",[a._v(\"解释：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"True and 'a=T' 计算结果是 'a=T'\\n继续计算 'a=T' or 'a=F' 计算结果还是 'a=T'\\n\")])])]),e(\"p\",[a._v(\"短路计算法则：\")]),a._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[a._v(\"在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。\")])])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"list：数学意义上的有序集合\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#list：数学意义上的有序集合\"}},[a._v(\"#\")]),a._v(\" list：数学意义上的有序集合\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"添加新元素\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#添加新元素\"}},[a._v(\"#\")]),a._v(\" 添加新元素\")]),a._v(\" \"),e(\"p\",[a._v(\"append(): 直接追加到末尾\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"L.append('new')\\n\")])])]),e(\"p\",[a._v(\"insert(): 添加到指定位置\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"#例如添加到第三个位置\\nL.insert(2,'new')\\n\")])])]),e(\"h3\",{attrs:{id:\"删除元素\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#删除元素\"}},[a._v(\"#\")]),a._v(\" 删除元素\")]),a._v(\" \"),e(\"p\",[a._v(\"pop(): 总是删除List最后一个元素\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"L.pop()\\n\")])])]),e(\"p\",[a._v(\"pop(n): 删除指定位置元素\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"L.pop(2)\\n\")])])]),e(\"h2\",{attrs:{id:\"tuple-：有序列表，中文为-元组\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tuple-：有序列表，中文为-元组\"}},[a._v(\"#\")]),a._v(' tuple ：有序列表，中文为 \"元组\"')]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"tuple一旦创建，就无法修改，获取元素的方式和list一样，可使用t[0],t[-1]访问元素，但无法修改，增加和删除\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"continue ：跳过后续循环代码，继续下一次循环\")])])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"dict\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dict\"}},[a._v(\"#\")]),a._v(\" dict\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"迭代dict中的value\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#迭代dict中的value\"}},[a._v(\"#\")]),a._v(\" 迭代dict中的value\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"values()方法：将dict转换成包含value的list,占用更多内存\")])]),a._v(\" \"),e(\"p\",[a._v(\"用法：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"for x in dict.values()\\n\")])])]),e(\"ul\",[e(\"li\",[a._v(\"itervalues()方法：无需转换，占用更少内存\")])]),a._v(\" \"),e(\"p\",[a._v(\"用法：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"for x in dict.itervalues()\\n\")])])]),e(\"h4\",{attrs:{id:\"同时迭代dict中的key和value\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同时迭代dict中的key和value\"}},[a._v(\"#\")]),a._v(\" 同时迭代dict中的key和value\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"items()方法：将dict转换成包含tuple的list\")])]),a._v(\" \"),e(\"p\",[a._v(\"用法：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"for key,value in dict.items():\\n\")])])]),e(\"h2\",{attrs:{id:\"生成列表\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生成列表\"}},[a._v(\"#\")]),a._v(\" 生成列表\")]),a._v(\" \"),e(\"p\",[a._v(\"例如利用列表生成式生成列表[1x2,3x4,……,99x100]\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"[x * (x+1) for x in range(1,100,2)]\\n\")])])]),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"isinstance(x, str) 可以判断变量 x 是否是字符串；\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"upper()返回字符串的大写字母、\")])])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"汉诺塔-越高盘子越小，越底下盘子越大\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#汉诺塔-越高盘子越小，越底下盘子越大\"}},[a._v(\"#\")]),a._v(\" 汉诺塔(越高盘子越小，越底下盘子越大)\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[a._v(\"def move(n, a, b, c):\\nif n == 1:\\n    print a, '--\\x3e', c\\n    return\\nmove(n-1,a,c,b)        #首先将a上的n-1个(除最底下一个)移动到b(即：a上的n-1个通过c移动到b)\\nprint a, '--\\x3e', c      #移动完成后，a上只剩下最底下一个(最大的一个)，然后将这个最大的移到c\\nmove(n-1,b,a,c)        #此时b上有n-1个，现在任务是将b上的所有n-1个移到c(即：b上的所有n-1个通过a移到c)\\nmove(4, 'A', 'B', 'C')\")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}